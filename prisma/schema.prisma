// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Neon online database
  // url      = env("DATABASE_URL")
  // Local Docker database
  url      = env("LOCAL_DATABASE_URL")
}

enum Role {
  CUSTOMER
  STAFF
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  username String @unique
  password String
  role     Role   @default(CUSTOMER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders  Order[] // Defines the One-to-Many relationship with Order
  Product Product[]

  @@map("users")
}

model Product {
  id          String   @id @default(uuid())
  name        String   @unique @db.VarChar(255)
  description String?  @db.Text
  price       Float
  stock       Int
  images      String[]
  creatorId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator    User        @relation(fields: [creatorId], references: [id])
  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  status     OrderStatus @default(PENDING)
  totalPrice Float       @map("total_price")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[] // List of items in the order

  @@map("orders")
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}
